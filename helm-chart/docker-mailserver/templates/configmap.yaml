---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    app: {{ template "dockermailserver.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "dockermailserver.fullname" . }}-configs
data:
  {{/* Use sample data if user is running in demo mode */}}
  {{- if .Values.demoMode.enabled -}}  
  ### We are in demo mode, so add in some sample data for quick testing
  postfix-accounts.cf: |
    # A sample user - the password is "password"
    user@example.com|{SHA512-CRYPT}$6$l4023rZnQEy/l0Rg$JeNjAAICB43VAX7GTJ9jeE7DR0LeyR5nU.ftq3c42T5E1IZSuRBqwM8erRh6t0CyIT6aYpBIAopzcQHNUvMV00
  postfix-virtual.cf: ""
  SigningTable: "*@example.com mail._domainkey.example.com"
  KeyTable: "mail._domainkey.example.com example.com:mail:/etc/opendkim/keys/example.com/mail.private"
  TrustedHosts: |
    127.0.0.1
    localhost
  ### End demo mode data
  {{/* Use real data from "config" subdirectory if user is _not_ running in demo mode */}}  
  {{ else -}}
  {{- (.Files.Glob "config/*").AsConfig | nindent 2 }}
  {{- (.Files.Glob "config/opendkim/*").AsConfig | nindent 2 }} 
  {{- end }}
  postfix-main.cf: |
  {{/* Enable proxy protocol for postscreen / dovecot */}}
  {{- if .Values.haproxy.enabled }}  # Necessary to permit proxy protocol from haproxy to postscreen
    postscreen_upstream_proxy_protocol = haproxy
  {{ end }}
  {{ if .Values.spfTestsDisabled }}
    smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination, reject_unauth_pipelining, reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_recipient_domain, reject_rbl_client zen.spamhaus.org, reject_rbl_client bl.spamcop.net
  {{ end -}}
  {{ if .Values.haproxy.enabled -}}  
  dovecot.cf: |   
    haproxy_trusted_networks = {{ .Values.haproxy.trustedNetworks }}
    service imap-login {
      inet_listener imap {
        haproxy = yes
      }  
      inet_listener imaps {
        haproxy = yes
      }
    {{ if .Values.rainloop.enabled -}}  
      inet_listener imaps-rainloop {
        port = 10993
        ssl = yes
      }
    {{ end }}      
    }    
    service pop3-login {
      inet_listener pop3 {
        haproxy = yes
      }
      inet_listener pop3s {
        haproxy = yes
      }                        
    }
    
  {{ end -}}
  am-i-healthy.sh: |
    #!/bin/bash
    # this script is intended to be used by periodic kubernetes liveness probes to ensure that the container
    # (and all its dependent services) is healthy
    {{ range .Values.livenessTests.commands -}}
    {{ . }} && \
    {{- end }}
    echo "All healthy"
